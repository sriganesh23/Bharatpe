#include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h>
SoftwareSerial mySerial(10, 11);
LiquidCrystal_I2C lcd(0x27, 16, 2); 
const int trig1 = 2;
const int echo1 = 3;
const int trig2 = 4;
const int echo2 = 5;
const int trig3 = 6;
const int echo3 = 7;
float distance1 = 0, result1 = 0;
float distance2 = 0, result2 = 0;
float distance3 = 0, result3 = 0;
long Time1, Time2, Time3;
float car1, car2, car3;
float Dist1 = 8.0, Dist2 = 8.0, Dist3 = 8.0;
int total = 0, timercnt = 0;
void setup()
{
  mySerial.begin(115200);
  pinMode(trig1, OUTPUT);
  pinMode(trig2, OUTPUT);
  pinMode(trig3, OUTPUT);
  pinMode(echo1, INPUT);
  pinMode(echo2, INPUT);
  pinMode(echo3, INPUT);
  digitalWrite(trig1, LOW);
  digitalWrite(trig2, LOW);
  digitalWrite(trig3, LOW);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print(" CAR PARK");
  lcd.setCursor(0, 1);
  lcd.print(" MONITORING SYSTEM");
  delay(2000);
  lcd.clear();
}

void loop()
{
  total = 0;
  car1 = sensor1();
  car2 = sensor2();
  car3 = sensor3();
  lcd.setCursor(0, 0);
  lcd.print("CAR1: ");
  if (car1 <= Dist1)
  {
    lcd.print("OK ");
  }
  else
  {
    total += 1;
  }
  if (car1 > Dist1)   lcd.print("NO ");
  lcd.print("CAR2: ");
  if (car2 <= Dist2)
  {
    lcd.print("OK ");
  }
  else
  {
    total += 1;
  }
  if (car2 > Dist2)   lcd.print("NO ");
  lcd.setCursor(0, 1);
  lcd.print("CAR3: ");
  if (car3 <= Dist3)
  {
    lcd.print("OK ");
  }
  else
  {
    total += 1;
  }
  if (car3 > Dist3)   lcd.print("NO ");
  lcd.print("FREE: ");
  lcd.print(total);
  if (timercnt >= 50)
  {
    mySerial.print('*');
    mySerial.print(total);
    mySerial  .println('#');
    timercnt = 0;
  }
  timercnt += 1;
  delay(200);
}

float sensor1(void)
{
  digitalWrite(trig1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig1, LOW);
  Time1 = pulseIn(echo1, HIGH);
  distance1 = Time1 * 0.034;
  return result1 = distance1 / 2;
}

float sensor2(void)
{
  digitalWrite(trig2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig2, LOW);
  Time2 = pulseIn(echo2, HIGH);
  distance2 = Time2 * 0.034;
  return result2 = distance2 / 2;
}

float sensor3(void)
{
  digitalWrite(trig3, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig3, LOW);
  Time3 = pulseIn(echo3, HIGH);
  distance3 = Time3 * 0.034;
  return result3 = distance3 / 2;
}

